import { render, screen } from '@testing-library/react';
import RecipeDisplay from '../components/recipeDisplay/recipeDisplay';

beforeAll(() => {
  jest.spyOn(console, 'log').mockImplementation(() => {});
});

afterAll(() => {
  (console.log as jest.Mock).mockRestore();
});

const mockProps = {
  title: '–®–∞–∫—à—É–∫–∞',
  description: '–Ø–∏—á–Ω–∏—Ü–∞ –≤ —Ç–æ–º–∞—Ç–Ω–æ–º —Å–æ—É—Å–µ —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å–ø–µ—Ü–∏—è–º–∏.',
  image: 'shakshuka.jpg',
  tags: ['–∑–∞–≤—Ç—Ä–∞–∫', '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ'],
  ingredients: ['–Ø–π—Ü–∞', '–¢–æ–º–∞—Ç—ã', '–°–ø–µ—Ü–∏–∏'],
  cookingTime: 20,
  servings: 2,
  instructions: '–°–º–µ—à–∞—Ç—å –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ.',
};

describe('RecipeDisplay', () => {
  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', () => {
    render(<RecipeDisplay {...mockProps} />);
    expect(screen.getByText(/–®–∞–∫—à—É–∫–∞/i)).toBeInTheDocument();
    expect(screen.getByText(/–Ø–∏—á–Ω–∏—Ü–∞ –≤ —Ç–æ–º–∞—Ç–Ω–æ–º —Å–æ—É—Å–µ/i)).toBeInTheDocument();
    const image = screen.getByAltText(/–®–∞–∫—à—É–∫–∞/i) as HTMLImageElement;
    expect(image.src).toContain('shakshuka.jpg');
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–≥–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', () => {
    render(<RecipeDisplay {...mockProps} />);
    expect(screen.getByText('–∑–∞–≤—Ç—Ä–∞–∫')).toBeInTheDocument();
    expect(screen.getByText('–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ')).toBeInTheDocument();

    expect(screen.getByText('–Ø–π—Ü–∞')).toBeInTheDocument();
    expect(screen.getByText('–¢–æ–º–∞—Ç—ã')).toBeInTheDocument();
    expect(screen.getByText('–°–ø–µ—Ü–∏–∏')).toBeInTheDocument();

    expect(
      screen.getByText(/–°–º–µ—à–∞—Ç—å –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ./i),
    ).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–µ–∑ —Ç–µ–≥–æ–≤" –µ—Å–ª–∏ —Ç–µ–≥–∏ –ø—É—Å—Ç—ã–µ', () => {
    render(<RecipeDisplay {...mockProps} tags={[]} />);
    expect(screen.getByText(/–ë–µ–∑ —Ç–µ–≥–æ–≤/i)).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤" –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç', () => {
    render(<RecipeDisplay {...mockProps} ingredients={[]} />);
    expect(screen.getByText(/–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤/i)).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞" –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ—Ç', () => {
    render(<RecipeDisplay {...mockProps} instructions="" />);
    expect(screen.getByText(/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞/i)).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ—Ä—Ü–∏–∏', () => {
    render(<RecipeDisplay {...mockProps} />);
    expect(screen.getByText(/‚è± –í—Ä–µ–º—è: 20 –º–∏–Ω/i)).toBeInTheDocument();
    expect(screen.getByText(/üçΩ –ü–æ—Ä—Ü–∏–π: 2/i)).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ù–µ —É–∫–∞–∑–∞–Ω–æ" –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏ –ø–æ—Ä—Ü–∏–∏ –Ω—É–ª–µ–≤—ã–µ', () => {
    render(<RecipeDisplay {...mockProps} cookingTime={0} servings={0} />);
    expect(screen.getByText(/‚è± –í—Ä–µ–º—è: –ù–µ —É–∫–∞–∑–∞–Ω–æ/i)).toBeInTheDocument();
    expect(screen.getByText(/üçΩ –ü–æ—Ä—Ü–∏–π: –ù–µ —É–∫–∞–∑–∞–Ω–æ/i)).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" –∏ "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è" –µ—Å–ª–∏ —ç—Ç–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ', () => {
    render(<RecipeDisplay {...mockProps} title="" description="" />);
    expect(screen.getByText(/–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è/i)).toBeInTheDocument();
    expect(screen.getByText(/–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è/i)).toBeInTheDocument();
  });
});
